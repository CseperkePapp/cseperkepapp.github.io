<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magical Particle Effects</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #0a0a1a 0%, #1a1a3a 50%, #2a1a4a 100%);
            overflow: hidden;
            height: 100vh;
            font-family: 'Arial', sans-serif;
        }

        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }

        .content {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            color: #ffffff;
            text-align: center;
            pointer-events: none;
        }

        .title {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
            opacity: 0.9;
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.7;
            text-shadow: 0 0 10px rgba(74, 138, 160, 0.5);
        }

        .floating-orb {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            filter: blur(1px);
        }

        .orb-1 {
            width: 60px;
            height: 60px;
            background: radial-gradient(circle, rgba(255, 215, 0, 0.4) 0%, rgba(255, 215, 0, 0.1) 50%, transparent 100%);
            top: 20%;
            left: 10%;
            animation: float1 8s ease-in-out infinite;
        }

        .orb-2 {
            width: 40px;
            height: 40px;
            background: radial-gradient(circle, rgba(74, 138, 160, 0.6) 0%, rgba(74, 138, 160, 0.2) 50%, transparent 100%);
            top: 60%;
            right: 15%;
            animation: float2 10s ease-in-out infinite;
        }

        .orb-3 {
            width: 80px;
            height: 80px;
            background: radial-gradient(circle, rgba(255, 140, 66, 0.3) 0%, rgba(255, 140, 66, 0.1) 50%, transparent 100%);
            bottom: 30%;
            left: 20%;
            animation: float3 12s ease-in-out infinite;
        }

        @keyframes float1 {
            0%, 100% { transform: translateY(0px) translateX(0px) scale(1); }
            25% { transform: translateY(-30px) translateX(20px) scale(1.1); }
            50% { transform: translateY(-60px) translateX(-10px) scale(0.9); }
            75% { transform: translateY(-20px) translateX(-30px) scale(1.05); }
        }

        @keyframes float2 {
            0%, 100% { transform: translateY(0px) translateX(0px) scale(1); }
            33% { transform: translateY(40px) translateX(-25px) scale(1.2); }
            66% { transform: translateY(-20px) translateX(15px) scale(0.8); }
        }

        @keyframes float3 {
            0%, 100% { transform: translateY(0px) translateX(0px) scale(1); }
            20% { transform: translateY(-25px) translateX(30px) scale(1.1); }
            40% { transform: translateY(20px) translateX(-20px) scale(0.9); }
            60% { transform: translateY(-40px) translateX(10px) scale(1.15); }
            80% { transform: translateY(10px) translateX(-40px) scale(0.95); }
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    
    <div class="floating-orb orb-1"></div>
    <div class="floating-orb orb-2"></div>
    <div class="floating-orb orb-3"></div>
    
    <div class="content">
        <h1 class="title">Lattice Particles 01</h1>
        <p class="subtitle">Move your mouse to interact with the magic</p>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const particles = [];
        const particleCount = 150;
        const mouse = { x: canvas.width / 2, y: canvas.height / 2 };

        // Color palette inspired by the image
        const colors = [
            'rgba(255, 215, 0, 0.8)',    // Gold
            'rgba(255, 237, 78, 0.7)',   // Light gold
            'rgba(74, 138, 160, 0.8)',   // Teal
            'rgba(42, 74, 106, 0.7)',    // Dark teal
            'rgba(255, 140, 66, 0.8)',   // Orange
            'rgba(255, 107, 26, 0.7)',   // Deep orange
            'rgba(138, 76, 160, 0.6)',   // Purple
            'rgba(200, 200, 255, 0.5)'   // Light blue
        ];

        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.vx = (Math.random() - 0.5) * 0.8;
                this.vy = (Math.random() - 0.5) * 0.8;
                this.size = Math.random() * 3 + 1;
                this.color = colors[Math.floor(Math.random() * colors.length)];
                this.life = 1;
                this.decay = Math.random() * 0.02 + 0.005;
                this.originalSize = this.size;
                this.trail = [];
                this.trailLength = Math.floor(Math.random() * 20) + 10;
            }

            update() {
                // Mouse attraction
                const dx = mouse.x - this.x;
                const dy = mouse.y - this.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < 200) {
                    const force = (200 - distance) / 200 * 0.3;
                    this.vx += (dx / distance) * force * 0.1;
                    this.vy += (dy / distance) * force * 0.1;
                }

                // Add flowing motion
                this.vx += Math.sin(Date.now() * 0.0005 + this.x * 0.01) * 0.05;
                this.vy += Math.cos(Date.now() * 0.0005 + this.y * 0.01) * 0.05;

                // Apply velocity
                this.x += this.vx;
                this.y += this.vy;

                // Add to trail
                this.trail.push({ x: this.x, y: this.y, life: 1 });
                if (this.trail.length > this.trailLength) {
                    this.trail.shift();
                }

                // Update trail life
                this.trail.forEach((point, index) => {
                    point.life = index / this.trail.length;
                });

                // Damping
                this.vx *= 0.98;
                this.vy *= 0.98;

                // Life decay
                this.life -= this.decay;
                this.size = this.originalSize * this.life;

                // Wrap around edges
                if (this.x < 0) this.x = canvas.width;
                if (this.x > canvas.width) this.x = 0;
                if (this.y < 0) this.y = canvas.height;
                if (this.y > canvas.height) this.y = 0;

                // Reset if dead
                if (this.life <= 0) {
                    this.x = Math.random() * canvas.width;
                    this.y = Math.random() * canvas.height;
                    this.life = 1;
                    this.size = this.originalSize;
                    this.trail = [];
                    this.color = colors[Math.floor(Math.random() * colors.length)];
                }
            }

            draw() {
                ctx.save();
                
                // Draw trail
                if (this.trail.length > 1) {
                    ctx.beginPath();
                    ctx.moveTo(this.trail[0].x, this.trail[0].y);
                    
                    for (let i = 1; i < this.trail.length; i++) {
                        ctx.lineTo(this.trail[i].x, this.trail[i].y);
                    }
                    
                    ctx.strokeStyle = this.color.replace(/[\d\.]+\)$/g, (this.life * 0.3) + ')');
                    ctx.lineWidth = this.size * 0.5;
                    ctx.lineCap = 'round';
                    ctx.stroke();
                }

                // Draw particle
                const gradient = ctx.createRadialGradient(
                    this.x, this.y, 0,
                    this.x, this.y, this.size * 2
                );
                
                gradient.addColorStop(0, this.color);
                gradient.addColorStop(0.5, this.color.replace(/[\d\.]+\)$/g, (this.life * 0.3) + ')'));
                gradient.addColorStop(1, 'transparent');

                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size * 2, 0, Math.PI * 2);
                ctx.fillStyle = gradient;
                ctx.fill();

                // Inner bright core
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size * 0.5, 0, Math.PI * 2);
                ctx.fillStyle = this.color.replace(/[\d\.]+\)$/g, (this.life * 0.9) + ')');
                ctx.fill();

                ctx.restore();
            }
        }

        // Initialize particles
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }

        // Animation loop
        function animate() {
            ctx.fillStyle = 'rgba(10, 10, 26, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });

            // Connection lines between nearby particles
            for (let i = 0; i < particles.length; i++) {
                for (let j = i + 1; j < particles.length; j++) {
                    const dx = particles[i].x - particles[j].x;
                    const dy = particles[i].y - particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < 100) {
                        ctx.beginPath();
                        ctx.moveTo(particles[i].x, particles[i].y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.strokeStyle = `rgba(255, 215, 0, ${(1 - distance / 100) * 0.2})`;
                        ctx.lineWidth = 0.5;
                        ctx.stroke();
                    }
                }
            }

            requestAnimationFrame(animate);
        }

        // Mouse tracking
        canvas.addEventListener('mousemove', (e) => {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
        });

        // Touch support
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            mouse.x = e.touches[0].clientX;
            mouse.y = e.touches[0].clientY;
        });

        // Resize handler
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        // Start animation
        animate();
    </script>
</body>
</html>
